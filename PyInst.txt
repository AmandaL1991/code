aW1wb3J0IGFyZ3BhcnNlDQoNCmltcG9ydCBjc3YNCg0KaW1wb3J0IGN0eXBlcyBhcyBjdA0KDQppbXBvcnQganNvbg0KDQppbXBvcnQgbG9nZ2luZw0KDQppbXBvcnQgb3MNCg0KaW1wb3J0IHNlbGVjdA0KDQppbXBvcnQgc3FsaXRlMw0KDQppbXBvcnQgc3lzDQoNCmltcG9ydCByZXF1ZXN0cw0KDQpmcm9tIGJhc2U2NCBpbXBvcnQgYjY0ZG
Vjb2RlDQoNCmZyb20gZ2V0cGFzcyBpbXBvcnQgZ2V0cGFzcw0KDQpmcm9tIHN1YnByb2Nlc3MgaW1wb3J0IFBJUEUsIFBvcGVuDQoNCg0KDQp0cnk6DQoNCiAgICAjIFB5dGhvbiAzDQoNCiAgICBmcm9tIHN1YnByb2Nlc3MgaW1wb3J0IERFVk5VTEwNCg0KZXhjZXB0IEltcG9ydEVycm9yOg0KDQogICAgIyBQeXRob24gMg0KDQogICAgREVW
TlVMTCA9IG9wZW4ob3MuZGV2bnVsbCwgJ3cnKQ0KDQoNCg0KdHJ5Og0KDQogICAgIyBQeXRob24gMw0KDQogICAgZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHVybHBhcnNlDQoNCmV4Y2VwdCBJbXBvcnRFcnJvcjoNCg0KICAgICMgUHl0aG9uIDINCg0KICAgIGZyb20gdXJscGFyc2UgaW1wb3J0IHVybHBhcnNlDQoNCg0KDQp0cnk6DQoNCi
AgICAjIFB5dGhvbiAzDQoNCiAgICBmcm9tIGNvbmZpZ3BhcnNlciBpbXBvcnQgQ29uZmlnUGFyc2VyDQoNCiAgICByYXdfaW5wdXQgPSBpbnB1dA0KDQpleGNlcHQgSW1wb3J0RXJyb3I6DQoNCiAgICAjIFB5dGhvbiAyDQoNCiAgICBmcm9tIENvbmZpZ1BhcnNlciBpbXBvcnQgQ29uZmlnUGFyc2VyDQoNCg0KDQpQWTMgPSBzeXMudmVyc2lv
bl9pbmZvLm1ham9yID4gMg0KDQpMT0cgPSBOb25lDQoNClZFUkJPU0UgPSBGYWxzZQ0KDQpTWVM2NCA9IHN5cy5tYXhzaXplID4gMioqMzINCg0KDQoNCmlmIG5vdCBQWTMgYW5kIG9zLm5hbWUgPT0gIm50IjoNCg0KICAgIHN5cy5zdGRlcnIud3JpdGUoIklESyIpDQoNCiAgICBzeXMuc3RkZXJyLndyaXRlKCJJREsiKQ0KDQoNCg0KIyBXaW
5kb3dzIHVzZXMgYSBtaXh0dXJlIG9mIGRpZmZlcmVudCBjb2RlY3MgZm9yIGRpZmZlcmVudCBjb21wb25lbnRzDQoNCiMgQU5TSSBDUDEyNTIgZm9yIHN5c3RlbSBtZXNzYWdlcywgd2hpbGUgTlNTIHVzZXMgVVRGLTgNCg0KIyBUbyBmdXJ0aGVyIGNvbXBsaWNhdGUgdGhpbmdzLCB3aXRoIHB5dGhvbiAyLjcgdGhlIGRlZmF1bHQgc3Rkb3V0
L3N0ZGluIGNvZGVjDQoNCiMgaXNuJ3QgVVRGLTggYnV0IGxhbmd1YWdlIGRlcGVuZGVudCAodGVzdGVkIG9uIFdpbmRvd3MgNykNCg0KDQoNCmlmIG9zLm5hbWUgPT0gIm50IjoNCg0KICAgIFNZU19FTkNPRElORyA9ICJjcDEyNTIiDQoNCiAgICBMSUJfRU5DT0RJTkcgPSAidXRmOCINCg0KZWxzZToNCg0KICAgIFNZU19FTkNPRElORyA9IC
J1dGY4Ig0KDQogICAgTElCX0VOQ09ESU5HID0gInV0ZjgiDQoNCg0KDQojIFdoZW4gdXNpbmcgcGlwZXMgc3RkaW4vc3Rkb3V0IGVuY29kaW5nIG1heSBiZSBOb25lDQoNClVTUl9FTkNPRElORyA9IHN5cy5zdGRpbi5lbmNvZGluZyBvciBzeXMuc3Rkb3V0LmVuY29kaW5nIG9yICJ1dGY4Ig0KDQoNCg0KDQoNCmRlZiBweTJfZGVjb2RlKF9i
eXRlcywgZW5jb2Rpbmc9VVNSX0VOQ09ESU5HKToNCg0KICAgIGlmIFBZMzoNCg0KICAgICAgICByZXR1cm4gX2J5dGVzDQoNCiAgICBlbHNlOg0KDQogICAgICAgIHJldHVybiBfYnl0ZXMuZGVjb2RlKGVuY29kaW5nKQ0KDQoNCg0KDQoNCmRlZiBweTJfZW5jb2RlKF91bmljb2RlLCBlbmNvZGluZz1VU1JfRU5DT0RJTkcpOg0KDQogICAgaW
YgUFkzOg0KDQogICAgICAgIHJldHVybiBfdW5pY29kZQ0KDQogICAgZWxzZToNCg0KICAgICAgICByZXR1cm4gX3VuaWNvZGUuZW5jb2RlKGVuY29kaW5nKQ0KDQoNCg0KDQoNCmRlZiB0eXBlX2RlY29kZShlbmNvZGluZyk6DQoNCiAgICByZXR1cm4gbGFtYmRhIHg6IHB5Ml9kZWNvZGUoeCwgZW5jb2RpbmcpDQoNCg0KDQoNCg0KZGVmIGdl
dF92ZXJzaW9uKCk6DQoNCiAgICAiIiJPYnRhaW4gdmVyc2lvbiBpbmZvcm1hdGlvbiBmcm9tIGdpdCBpZiBhdmFpbGFibGUgb3RoZXJ3aXNlIHVzZQ0KDQogICAgdGhlIGludGVybmFsIHZlcnNpb24gbnVtYmVyDQoNCiAgICAiIiINCg0KICAgIGRlZiBpbnRlcm5hbF92ZXJzaW9uKCk6DQoNCiAgICAgICAgcmV0dXJuICcuJy5qb2luKG1hcC
hzdHIsIF9fdmVyc2lvbl9pbmZvX19bOjNdKSkgKyAnJy5qb2luKF9fdmVyc2lvbl9pbmZvX19bMzpdKQ0KDQoNCg0KICAgIHRyeToNCg0KICAgICAgICBwID0gUG9wZW4oWyJnaXQiLCAiZGVzY3JpYmUiLCAiLS10YWdzIl0sIHN0ZG91dD1QSVBFLCBzdGRlcnI9REVWTlVMTCkNCg0KICAgIGV4Y2VwdCBPU0Vycm9yOg0KDQogICAgICAgIHJl
dHVybiBpbnRlcm5hbF92ZXJzaW9uKCkNCg0KDQoNCiAgICBzdGRvdXQsIHN0ZGVyciA9IHAuY29tbXVuaWNhdGUoKQ0KDQoNCg0KICAgIGlmIHAucmV0dXJuY29kZToNCg0KICAgICAgICByZXR1cm4gaW50ZXJuYWxfdmVyc2lvbigpDQoNCiAgICBlbHNlOg0KDQogICAgICAgICMgQm90aCBweTIgYW5kIHB5MyByZXR1cm4gYnl0ZXMgaGVyZQ
0KDQogICAgICAgIHJldHVybiBzdGRvdXQuZGVjb2RlKFVTUl9FTkNPRElORykuc3RyaXAoKQ0KDQoNCg0KDQoNCl9fdmVyc2lvbl9pbmZvX18gPSAoMCwgOCwgMCwgIitnaXQiKQ0KDQpfX3ZlcnNpb25fXyA9IGdldF92ZXJzaW9uKCkNCg0KDQoNCg0KDQpjbGFzcyBOb3RGb3VuZEVycm9yKEV4Y2VwdGlvbik6DQoNCiAgICBwYXNzDQoNCg0K
DQoNCg0KY2xhc3MgRXhpdChFeGNlcHRpb24pOg0KDQogICAgIiIiRXhjZXB0aW9uIHRvIGFsbG93IGEgY2xlYW4gZXhpdCBmcm9tIGFueSBwb2ludCBpbiBleGVjdXRpb24NCg0KICAgICIiIg0KDQogICAgRVJST1IgPSAxDQoNCiAgICBNSVNTSU5HX1BST0ZJTEVJTkkgPSAyDQoNCiAgICBNSVNTSU5HX1NFQ1JFVFMgPSAzDQoNCiAgICBCQU
RfUFJPRklMRUlOSSA9IDQNCg0KICAgIExPQ0FUSU9OX05PX0RJUkVDVE9SWSA9IDUNCg0KICAgIEJBRF9TRUNSRVRTID0gNg0KDQoNCg0KICAgIEZBSUxfTE9DQVRFX05TUyA9IDEwDQoNCiAgICBGQUlMX0xPQURfTlNTID0gMTENCg0KICAgIEZBSUxfSU5JVF9OU1MgPSAxMg0KDQogICAgRkFJTF9OU1NfS0VZU0xPVCA9IDEzDQoNCiAgICBG
QUlMX1NIVVRET1dOX05TUyA9IDE0DQoNCiAgICBCQURfTUFTVEVSX1BBU1NXT1JEID0gMTUNCg0KICAgIE5FRURfTUFTVEVSX1BBU1NXT1JEID0gMTYNCg0KDQoNCiAgICBQQVNTU1RPUkVfTk9UX0lOSVQgPSAyMA0KDQogICAgUEFTU1NUT1JFX01JU1NJTkcgPSAyMQ0KDQogICAgUEFTU1NUT1JFX0VSUk9SID0gMjINCg0KDQoNCiAgICBSRU
FEX0dPVF9FT0YgPSAzMA0KDQogICAgTUlTU0lOR19DSE9JQ0UgPSAzMQ0KDQogICAgTk9fU1VDSF9QUk9GSUxFID0gMzINCg0KDQoNCiAgICBVTktOT1dOX0VSUk9SID0gMTAwDQoNCiAgICBLRVlCT0FSRF9JTlRFUlJVUFQgPSAxMDINCg0KDQoNCiAgICBkZWYgX19pbml0X18oc2VsZiwgZXhpdGNvZGUpOg0KDQogICAgICAgIHNlbGYuZXhp
dGNvZGUgPSBleGl0Y29kZQ0KDQoNCg0KICAgIGRlZiBfX3VuaWNvZGVfXyhzZWxmKToNCg0KICAgICAgICByZXR1cm4gIklESyB7MH0iLmZvcm1hdChzZWxmLmV4aXRjb2RlKQ0KDQoNCg0KDQoNCmNsYXNzIENyZWRlbnRpYWxzKG9iamVjdCk6DQoNCiAgICBkZWYgX19pbml0X18oc2VsZiwgZGIpOg0KDQogICAgICAgIHNlbGYuZGIgPSBkYg
0KDQoNCg0KICAgICAgICAjTE9HLmRlYnVnKCJEYXRhYmFzZSBsb2NhdGlvbjogJXMiLCBzZWxmLmRiKQ0KDQogICAgICAgIGlmIG5vdCBvcy5wYXRoLmlzZmlsZShkYik6DQoNCiAgICAgICAgICAgIHJhaXNlIE5vdEZvdW5kRXJyb3IoIkVSUk9SIC0gezB9IGRhdGFiYXNlIG5vdCBmb3VuZFxuIi5mb3JtYXQoZGIpKQ0KDQoNCg0KICAgICAg
ICAjTE9HLmluZm8oIlVzaW5nICVzIGZvciBjcmVkZW50aWFscy4iLCBkYikNCg0KDQoNCiAgICBkZWYgX19pdGVyX18oc2VsZik6DQoNCiAgICAgICAgcGFzcw0KDQoNCg0KICAgIGRlZiBkb25lKHNlbGYpOg0KDQogICAgICAgIHBhc3MNCg0KDQoNCg0KDQpjbGFzcyBTcWxpdGVDcmVkZW50aWFscyhDcmVkZW50aWFscyk6DQoNCiAgICBkZW
YgX19pbml0X18oc2VsZiwgcHJvZmlsZSk6DQoNCiAgICAgICAgZGIgPSBvcy5wYXRoLmpvaW4ocHJvZmlsZSwgInNpZ25vbnMuc3FsaXRlIikNCg0KDQoNCiAgICAgICAgc3VwZXIoU3FsaXRlQ3JlZGVudGlhbHMsIHNlbGYpLl9faW5pdF9fKGRiKQ0KDQoNCg0KICAgICAgICBzZWxmLmNvbm4gPSBzcWxpdGUzLmNvbm5lY3QoZGIpDQoNCiAg
ICAgICAgc2VsZi5jID0gc2VsZi5jb25uLmN1cnNvcigpDQoNCg0KDQogICAgZGVmIF9faXRlcl9fKHNlbGYpOg0KDQoNCg0KICAgICAgICBzZWxmLmMuZXhlY3V0ZSgiU0VMRUNUIGhvc3RuYW1lLCBlbmNyeXB0ZWRVc2VybmFtZSwgZW5jcnlwdGVkUGFzc3dvcmQsIGVuY1R5cGUgIg0KDQogICAgICAgICAgICAgICAgICAgICAgICJGUk9NIG
1vel9sb2dpbnMiKQ0KDQogICAgICAgIGZvciBpIGluIHNlbGYuYzoNCg0KICAgICAgICAgICAgIyB5aWVsZHMgaG9zdG5hbWUsIGVuY3J5cHRlZFVzZXJuYW1lLCBlbmNyeXB0ZWRQYXNzd29yZCwgZW5jVHlwZQ0KDQogICAgICAgICAgICB5aWVsZCBpDQoNCg0KDQogICAgZGVmIGRvbmUoc2VsZik6DQoNCiAgICAgICAgc3VwZXIoU3FsaXRl
Q3JlZGVudGlhbHMsIHNlbGYpLmRvbmUoKQ0KDQoNCg0KICAgICAgICBzZWxmLmMuY2xvc2UoKQ0KDQogICAgICAgIHNlbGYuY29ubi5jbG9zZSgpDQoNCg0KDQoNCg0KY2xhc3MgSnNvbkNyZWRlbnRpYWxzKENyZWRlbnRpYWxzKToNCg0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCBwcm9maWxlKToNCg0KICAgICAgICBkYiA9IG9zLnBhdGguam
9pbihwcm9maWxlLCAibG9naW5zLmpzb24iKQ0KDQoNCg0KICAgICAgICBzdXBlcihKc29uQ3JlZGVudGlhbHMsIHNlbGYpLl9faW5pdF9fKGRiKQ0KDQoNCg0KICAgIGRlZiBfX2l0ZXJfXyhzZWxmKToNCg0KICAgICAgICB3aXRoIG9wZW4oc2VsZi5kYikgYXMgZmg6DQoNCiAgICAgICAgICAgIGRhdGEgPSBqc29uLmxvYWQoZmgpDQoNCg0K
DQogICAgICAgICAgICB0cnk6DQoNCiAgICAgICAgICAgICAgICBsb2dpbnMgPSBkYXRhWyJsb2dpbnMiXQ0KDQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uOg0KDQogICAgICAgICAgICAgICAgcmFpc2UgRXhpdChFeGl0LkJBRF9TRUNSRVRTKQ0KDQoNCg0KICAgICAgICAgICAgZm9yIGkgaW4gbG9naW5zOg0KDQogICAgICAgICAgIC
AgICAgeWllbGQgKGlbImhvc3RuYW1lIl0sIGlbImVuY3J5cHRlZFVzZXJuYW1lIl0sDQoNCiAgICAgICAgICAgICAgICAgICAgICAgaVsiZW5jcnlwdGVkUGFzc3dvcmQiXSwgaVsiZW5jVHlwZSJdKQ0KDQoNCg0KDQoNCmNsYXNzIE5TU0RlY29kZXIob2JqZWN0KToNCg0KICAgIGNsYXNzIFNFQ0l0ZW0oY3QuU3RydWN0dXJlKToNCg0KDQoN
CiAgICAgICAgX2ZpZWxkc18gPSBbDQoNCiAgICAgICAgICAgICgndHlwZScsIGN0LmNfdWludCksDQoNCiAgICAgICAgICAgICgnZGF0YScsIGN0LmNfY2hhcl9wKSwgICMgYWN0dWFsbHk6IHVuc2lnbmVkIGNoYXIgKg0KDQogICAgICAgICAgICAoJ2xlbicsIGN0LmNfdWludCksDQoNCiAgICAgICAgXQ0KDQoNCg0KICAgIGNsYXNzIFBLMT
FTbG90SW5mbyhjdC5TdHJ1Y3R1cmUpOg0KDQogICAgICAgICIiIm9wYXF1ZQ0KDQogICAgICAgICIiIg0KDQoNCg0KICAgIGRlZiBfX2luaXRfXyhzZWxmKToNCg0KICAgICAgICAjIExvY2F0ZSBsaWJuc3MgYW5kIHRyeSBsb2FkaW5nIGl0DQoNCiAgICAgICAgc2VsZi5OU1MgPSBOb25lDQoNCiAgICAgICAgc2VsZi5sb2FkX2xpYm5zcygp
DQoNCg0KDQogICAgICAgIFNsb3RJbmZvUHRyID0gY3QuUE9JTlRFUihzZWxmLlBLMTFTbG90SW5mbykNCg0KICAgICAgICBTRUNJdGVtUHRyID0gY3QuUE9JTlRFUihzZWxmLlNFQ0l0ZW0pDQoNCg0KDQogICAgICAgIHNlbGYuX3NldF9jdHlwZXMoY3QuY19pbnQsICJOU1NfSW5pdCIsIGN0LmNfY2hhcl9wKQ0KDQogICAgICAgIHNlbGYuX3
NldF9jdHlwZXMoY3QuY19pbnQsICJOU1NfU2h1dGRvd24iKQ0KDQogICAgICAgIHNlbGYuX3NldF9jdHlwZXMoU2xvdEluZm9QdHIsICJQSzExX0dldEludGVybmFsS2V5U2xvdCIpDQoNCiAgICAgICAgc2VsZi5fc2V0X2N0eXBlcyhOb25lLCAiUEsxMV9GcmVlU2xvdCIsIFNsb3RJbmZvUHRyKQ0KDQogICAgICAgIHNlbGYuX3NldF9jdHlw
ZXMoY3QuY19pbnQsICJQSzExX0NoZWNrVXNlclBhc3N3b3JkIiwgU2xvdEluZm9QdHIsIGN0LmNfY2hhcl9wKQ0KDQogICAgICAgIHNlbGYuX3NldF9jdHlwZXMoY3QuY19pbnQsICJQSzExU0RSX0RlY3J5cHQiLCBTRUNJdGVtUHRyLCBTRUNJdGVtUHRyLCBjdC5jX3ZvaWRfcCkNCg0KICAgICAgICBzZWxmLl9zZXRfY3R5cGVzKE5vbmUsIC
JTRUNJVEVNX1pmcmVlSXRlbSIsIFNFQ0l0ZW1QdHIsIGN0LmNfaW50KQ0KDQoNCg0KICAgICAgICAjIGZvciBlcnJvciBoYW5kbGluZw0KDQogICAgICAgIHNlbGYuX3NldF9jdHlwZXMoY3QuY19pbnQsICJQT1JUX0dldEVycm9yIikNCg0KICAgICAgICBzZWxmLl9zZXRfY3R5cGVzKGN0LmNfY2hhcl9wLCAiUFJfRXJyb3JUb05hbWUiLCBj
dC5jX2ludCkNCg0KICAgICAgICBzZWxmLl9zZXRfY3R5cGVzKGN0LmNfY2hhcl9wLCAiUFJfRXJyb3JUb1N0cmluZyIsIGN0LmNfaW50LCBjdC5jX3VpbnQzMikNCg0KDQoNCiAgICBkZWYgX3NldF9jdHlwZXMoc2VsZiwgcmVzdHlwZSwgbmFtZSwgKmFyZ3R5cGVzKToNCg0KICAgICAgICAiIiJTZXQgaW5wdXQvb3V0cHV0IHR5cGVzIG9uIG
xpYm5zcyBDIGZ1bmN0aW9ucyBmb3IgYXV0b21hdGljIHR5cGUgY2FzdGluZw0KDQogICAgICAgICIiIg0KDQogICAgICAgIHJlcyA9IGdldGF0dHIoc2VsZi5OU1MsIG5hbWUpDQoNCiAgICAgICAgcmVzLnJlc3R5cGUgPSByZXN0eXBlDQoNCiAgICAgICAgcmVzLmFyZ3R5cGVzID0gYXJndHlwZXMNCg0KICAgICAgICBzZXRhdHRyKHNlbGYs
ICJfIiArIG5hbWUsIHJlcykNCg0KDQoNCiAgICBAc3RhdGljbWV0aG9kDQoNCiAgICBkZWYgZmluZF9uc3MobG9jYXRpb25zLCBuc3NuYW1lKToNCg0KDQoNCiAgICAgICAgZmFpbF9lcnJvcnMgPSBbXQ0KDQoNCg0KICAgICAgICBmb3IgbG9jIGluIGxvY2F0aW9uczoNCg0KICAgICAgICAgICAgbnNzbGliID0gb3MucGF0aC5qb2luKGxvYy
wgbnNzbmFtZSkNCg0KICAgICAgICAgICAgTE9HLmRlYnVnKCJMb2FkaW5nIE5TUyBsaWJyYXJ5IGZyb20gJXMiLCBuc3NsaWIpDQoNCg0KDQogICAgICAgICAgICBpZiBvcy5uYW1lID09ICJudCI6DQoNCg0KDQogICAgICAgICAgICAgICAgb3MuZW52aXJvblsiUEFUSCJdID0gJzsnLmpvaW4oW2xvYywgb3MuZW52aXJvblsiUEFUSCJdXSkN
Cg0KICAgICAgICAgICAgICAgIExPRy5kZWJ1ZygiUEFUSCBpcyBub3cgJXMiLCBvcy5lbnZpcm9uWyJQQVRIIl0pDQoNCg0KDQogICAgICAgICAgICAgICAgaWYgbG9jOg0KDQogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBvcy5wYXRoLmlzZGlyKGxvYyk6DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICMgTm8gcG9pbnQgaW4gdHJ5aW
5nIHRvIGxvYWQgZnJvbSBwYXRocyB0aGF0IGRvbid0IGV4aXN0DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQoNCg0KDQogICAgICAgICAgICAgICAgICAgIHdvcmtkaXIgPSBvcy5nZXRjd2QoKQ0KDQogICAgICAgICAgICAgICAgICAgIG9zLmNoZGlyKGxvYykNCg0KDQoNCiAgICAgICAgICAgIHRyeToNCg0KICAgICAg
ICAgICAgICAgIG5zcyA9IGN0LkNETEwobnNzbGliKQ0KDQogICAgICAgICAgICBleGNlcHQgT1NFcnJvciBhcyBlOg0KDQogICAgICAgICAgICAgICAgZmFpbF9lcnJvcnMuYXBwZW5kKChuc3NsaWIsIHN0cihlKSkpDQoNCiAgICAgICAgICAgIGVsc2U6DQoNCiAgICAgICAgICAgICAgICAjTE9HLmRlYnVnKCJMb2FkZWQgTlNTIGxpYnJhcn
kgZnJvbSAlcyIsIG5zc2xpYikNCg0KICAgICAgICAgICAgICAgIHJldHVybiBuc3MNCg0KICAgICAgICAgICAgZmluYWxseToNCg0KICAgICAgICAgICAgICAgIGlmIG9zLm5hbWUgPT0gIm50IiBhbmQgbG9jOg0KDQogICAgICAgICAgICAgICAgICAgICMgUmVzdG9yZSB3b3JrZGlyIGNoYW5nZWQgYWJvdmUNCg0KICAgICAgICAgICAgICAg
ICAgICBvcy5jaGRpcih3b3JrZGlyKQ0KDQoNCg0KICAgICAgICBlbHNlOg0KDQogICAgICAgICAgICBmb3IgdGFyZ2V0LCBlcnJvciBpbiBmYWlsX2Vycm9yczoNCg0KICAgICAgICAgICAgICAgIExPRy5lcnJvcigiRXJyb3Igd2hlbiBsb2FkaW5nICVzIHdhcyAlcyIsIHRhcmdldCwgcHkyX2RlY29kZShzdHIoZXJyb3IpLCBTWVNfRU5DT0
RJTkcpKQ0KDQoNCg0KICAgICAgICAgICAgcmFpc2UgRXhpdChFeGl0LkZBSUxfTE9DQVRFX05TUykNCg0KDQoNCiAgICBkZWYgbG9hZF9saWJuc3Moc2VsZik6DQoNCiAgICAgICAgaWYgb3MubmFtZSA9PSAibnQiOg0KDQogICAgICAgICAgICBuc3NuYW1lID0gIm5zczMuZGxsIg0KDQogICAgICAgICAgICBpZiBTWVM2NDoNCg0KICAgICAg
ICAgICAgICAgIGxvY2F0aW9ucyA9ICgNCg0KICAgICAgICAgICAgICAgICAgICAiIiwNCg0KICAgICAgICAgICAgICAgICAgICByIkM6XFByb2dyYW0gRmlsZXNcTW96aWxsYSBGaXJlZm94IiwNCg0KICAgICAgICAgICAgICAgICAgICByIkM6XFByb2dyYW0gRmlsZXNcTW96aWxsYSBUaHVuZGVyYmlyZCIsDQoNCiAgICAgICAgICAgICAgIC
AgICAgciJDOlxQcm9ncmFtIEZpbGVzXE5pZ2h0bHkiLA0KDQogICAgICAgICAgICAgICAgKQ0KDQogICAgICAgICAgICBlbHNlOg0KDQogICAgICAgICAgICAgICAgbG9jYXRpb25zID0gKA0KDQogICAgICAgICAgICAgICAgICAgICIiLA0KDQogICAgICAgICAgICAgICAgICAgIHIiQzpcUHJvZ3JhbSBGaWxlcyAoeDg2KVxNb3ppbGxhIEZp
cmVmb3giLA0KDQogICAgICAgICAgICAgICAgICAgIHIiQzpcUHJvZ3JhbSBGaWxlcyAoeDg2KVxNb3ppbGxhIFRodW5kZXJiaXJkIiwNCg0KICAgICAgICAgICAgICAgICAgICByIkM6XFByb2dyYW0gRmlsZXMgKHg4NilcTmlnaHRseSIsDQoNCiAgICAgICAgICAgICAgICAgICAgIyBPbiB3aW5kb3dzIDMyYml0IHRoZXNlIGZvbGRlcnMgY2
FuIGFsc28gYmUgMzJiaXQNCg0KICAgICAgICAgICAgICAgICAgICByIkM6XFByb2dyYW0gRmlsZXNcTW96aWxsYSBGaXJlZm94IiwNCg0KICAgICAgICAgICAgICAgICAgICByIkM6XFByb2dyYW0gRmlsZXNcTW96aWxsYSBUaHVuZGVyYmlyZCIsDQoNCiAgICAgICAgICAgICAgICAgICAgciJDOlxQcm9ncmFtIEZpbGVzXE5pZ2h0bHkiLA0K
DQogICAgICAgICAgICAgICAgKQ0KDQogICAgICAgIGVsaWYgb3MudW5hbWUoKVswXSA9PSAiRGFyd2luIjoNCg0KICAgICAgICAgICAgbnNzbmFtZSA9ICJsaWJuc3MzLmR5bGliIg0KDQogICAgICAgICAgICBsb2NhdGlvbnMgPSAoDQoNCiAgICAgICAgICAgICAgICAiIiwNCg0KICAgICAgICAgICAgICAgICIvdXNyL2xvY2FsL2xpYi9uc3
MiLA0KDQogICAgICAgICAgICAgICAgIi91c3IvbG9jYWwvbGliIiwNCg0KICAgICAgICAgICAgICAgICIvb3B0L2xvY2FsL2xpYi9uc3MiLA0KDQogICAgICAgICAgICAgICAgIi9zdy9saWIvZmlyZWZveCIsDQoNCiAgICAgICAgICAgICAgICAiL3N3L2xpYi9tb3ppbGxhIiwNCg0KICAgICAgICAgICAgICAgICIvdXNyL2xvY2FsL29wdC9u
c3MvbGliIiwgICMNCg0KICAgICAgICAgICAgICAgICIvb3B0L3BrZy9saWIvbnNzIiwNCg0KICAgICAgICAgICAgKQ0KDQoNCg0KICAgICAgICBlbHNlOg0KDQogICAgICAgICAgICBuc3NuYW1lID0gImxpYm5zczMuc28iDQoNCiAgICAgICAgICAgIGlmIFNZUzY0Og0KDQogICAgICAgICAgICAgICAgbG9jYXRpb25zID0gKA0KDQogICAgIC
AgICAgICAgICAgICAgICIiLA0KDQogICAgICAgICAgICAgICAgICAgICIvdXNyL2xpYjY0IiwNCg0KICAgICAgICAgICAgICAgICAgICAiL3Vzci9saWI2NC9uc3MiLA0KDQogICAgICAgICAgICAgICAgICAgICIvdXNyL2xpYiIsDQoNCiAgICAgICAgICAgICAgICAgICAgIi91c3IvbGliL25zcyIsDQoNCiAgICAgICAgICAgICAgICAgICAg
Ii91c3IvbG9jYWwvbGliIiwNCg0KICAgICAgICAgICAgICAgICAgICAiL3Vzci9sb2NhbC9saWIvbnNzIiwNCg0KICAgICAgICAgICAgICAgICAgICAiL29wdC9sb2NhbC9saWIiLA0KDQogICAgICAgICAgICAgICAgICAgICIvb3B0L2xvY2FsL2xpYi9uc3MiLA0KDQogICAgICAgICAgICAgICAgICAgIG9zLnBhdGguZXhwYW5kdXNlcigifi
8ubml4LXByb2ZpbGUvbGliIiksDQoNCiAgICAgICAgICAgICAgICApDQoNCiAgICAgICAgICAgIGVsc2U6DQoNCiAgICAgICAgICAgICAgICBsb2NhdGlvbnMgPSAoDQoNCiAgICAgICAgICAgICAgICAgICAgIiIsDQoNCiAgICAgICAgICAgICAgICAgICAgIi91c3IvbGliIiwNCg0KICAgICAgICAgICAgICAgICAgICAiL3Vzci9saWIvbnNz
IiwNCg0KICAgICAgICAgICAgICAgICAgICAiL3Vzci9saWIzMiIsDQoNCiAgICAgICAgICAgICAgICAgICAgIi91c3IvbGliMzIvbnNzIiwNCg0KICAgICAgICAgICAgICAgICAgICAiL3Vzci9saWI2NCIsDQoNCiAgICAgICAgICAgICAgICAgICAgIi91c3IvbGliNjQvbnNzIiwNCg0KICAgICAgICAgICAgICAgICAgICAiL3Vzci9sb2NhbC
9saWIiLA0KDQogICAgICAgICAgICAgICAgICAgICIvdXNyL2xvY2FsL2xpYi9uc3MiLA0KDQogICAgICAgICAgICAgICAgICAgICIvb3B0L2xvY2FsL2xpYiIsDQoNCiAgICAgICAgICAgICAgICAgICAgIi9vcHQvbG9jYWwvbGliL25zcyIsDQoNCiAgICAgICAgICAgICAgICAgICAgb3MucGF0aC5leHBhbmR1c2VyKCJ+Ly5uaXgtcHJvZmls
ZS9saWIiKSwNCg0KICAgICAgICAgICAgICAgICkNCg0KDQoNCiAgICAgICAgIyBJZiB0aGlzIHN1Y2NlZWRzIGxpYm5zcyB3YXMgbG9hZGVkDQoNCiAgICAgICAgc2VsZi5OU1MgPSBzZWxmLmZpbmRfbnNzKGxvY2F0aW9ucywgbnNzbmFtZSkNCg0KDQoNCiAgICBkZWYgaGFuZGxlX2Vycm9yKHNlbGYpOg0KDQogICAgICAgICIiIklmIGFuIG
Vycm9yIGhhcHBlbnMgaW4gbGlibnNzLCBoYW5kbGUgaXQgYW5kIHByaW50IHNvbWUgZGVidWcgaW5mb3JtYXRpb24NCg0KICAgICAgICAiIiINCg0KICAgICAgICBMT0cuZGVidWcoIkVycm9yIGR1cmluZyBhIGNhbGwgdG8gTlNTIGxpYnJhcnksIHRyeWluZyB0byBvYnRhaW4gZXJyb3IgaW5mbyIpDQoNCg0KDQogICAgICAgIGNvZGUgPSBz
ZWxmLl9QT1JUX0dldEVycm9yKCkNCg0KICAgICAgICBuYW1lID0gc2VsZi5fUFJfRXJyb3JUb05hbWUoY29kZSkNCg0KICAgICAgICBuYW1lID0gIk5VTEwiIGlmIG5hbWUgaXMgTm9uZSBlbHNlIG5hbWUuZGVjb2RlKFNZU19FTkNPRElORykNCg0KDQoNCiAgICAgICAgdGV4dCA9IHNlbGYuX1BSX0Vycm9yVG9TdHJpbmcoY29kZSwgMCkNCg
0KICAgICAgICB0ZXh0ID0gdGV4dC5kZWNvZGUoU1lTX0VOQ09ESU5HKQ0KDQoNCg0KICAgICAgICBMT0cuZGVidWcoIiVzOiAlcyIsIG5hbWUsIHRleHQpDQoNCg0KDQogICAgZGVmIGRlY29kZShzZWxmLCBkYXRhNjQpOg0KDQogICAgICAgIGRhdGEgPSBiNjRkZWNvZGUoZGF0YTY0KQ0KDQogICAgICAgIGlucCA9IHNlbGYuU0VDSXRlbSgw
LCBkYXRhLCBsZW4oZGF0YSkpDQoNCiAgICAgICAgb3V0ID0gc2VsZi5TRUNJdGVtKDAsIE5vbmUsIDApDQoNCg0KDQogICAgICAgIGUgPSBzZWxmLl9QSzExU0RSX0RlY3J5cHQoaW5wLCBvdXQsIE5vbmUpDQoNCiAgICAgICAgTE9HLmRlYnVnKCJEZWNyeXB0aW9uIG9mIGRhdGEgcmV0dXJuZWQgJXMiLCBlKQ0KDQogICAgICAgIHRyeToNCg
0KICAgICAgICAgICAgaWYgZSA9PSAtMToNCg0KICAgICAgICAgICAgICAgIExPRy5lcnJvcigiUGFzc3dvcmQgZGVjcnlwdGlvbiBmYWlsZWQuIFBhc3N3b3JkcyBwcm90ZWN0ZWQgYnkgYSBNYXN0ZXIgUGFzc3dvcmQhIikNCg0KICAgICAgICAgICAgICAgIHNlbGYuaGFuZGxlX2Vycm9yKCkNCg0KICAgICAgICAgICAgICAgIHJhaXNlIEV4
aXQoRXhpdC5ORUVEX01BU1RFUl9QQVNTV09SRCkNCg0KDQoNCiAgICAgICAgICAgIHJlcyA9IGN0LnN0cmluZ19hdChvdXQuZGF0YSwgb3V0LmxlbikuZGVjb2RlKExJQl9FTkNPRElORykNCg0KICAgICAgICBmaW5hbGx5Og0KDQoNCg0KICAgICAgICAgICAgc2VsZi5fU0VDSVRFTV9aZnJlZUl0ZW0ob3V0LCAwKQ0KDQoNCg0KICAgICAgIC
ByZXR1cm4gcmVzDQoNCg0KDQoNCg0KY2xhc3MgTlNTSW50ZXJhY3Rpb24ob2JqZWN0KToNCg0KDQoNCiAgICBkZWYgX19pbml0X18oc2VsZik6DQoNCiAgICAgICAgc2VsZi5wcm9maWxlID0gTm9uZQ0KDQogICAgICAgIHNlbGYuTlNTID0gTlNTRGVjb2RlcigpDQoNCg0KDQogICAgZGVmIGxvYWRfcHJvZmlsZShzZWxmLCBwcm9maWxlKToN
Cg0KICAgICAgICAjTE9HLmRlYnVnKCJJbml0aWFsaXppbmcgTlNTIHdpdGggcHJvZmlsZSBwYXRoICclcyciLCBwcm9maWxlKQ0KDQogICAgICAgIHNlbGYucHJvZmlsZSA9IHByb2ZpbGUNCg0KDQoNCiAgICAgICAgcHJvZmlsZSA9IHByb2ZpbGUuZW5jb2RlKExJQl9FTkNPRElORykNCg0KDQoNCiAgICAgICAgZSA9IHNlbGYuTlNTLl9OU1
NfSW5pdChiInNxbDoiICsgcHJvZmlsZSkNCg0KICAgICAgICAjTE9HLmRlYnVnKCJJbml0aWFsaXppbmcgTlNTIHJldHVybmVkICVzIiwgZSkNCg0KDQoNCiAgICAgICAgaWYgZSAhPSAwOg0KDQogICAgICAgICMgICAgTE9HLmVycm9yKCJDb3VsZG4ndCBpbml0aWFsaXplIE5TUywgbWF5YmUgJyVzJyBpcyBub3QgYSB2YWxpZCBwcm9maWxl
PyIsIHNlbGYucHJvZmlsZSkNCg0KICAgICAgICAgICAgc2VsZi5OU1MuaGFuZGxlX2Vycm9yKCkNCg0KICAgICAgICAgICAgcmFpc2UgRXhpdChFeGl0LkZBSUxfSU5JVF9OU1MpDQoNCg0KDQogICAgZGVmIGF1dGhlbnRpY2F0ZShzZWxmLCBpbnRlcmFjdGl2ZSk6DQoNCiAgICAgICAga2V5c2xvdCA9IHNlbGYuTlNTLl9QSzExX0dldEludG
VybmFsS2V5U2xvdCgpDQoNCg0KDQogICAgICAgICNMT0cuZGVidWcoIkludGVybmFsIGtleSBzbG90ICVzIiwga2V5c2xvdCkNCg0KICAgICAgICBpZiBub3Qga2V5c2xvdDoNCg0KICAgICAgICAgICAgTE9HLmVycm9yKCJGYWlsZWQgdG8gcmV0cmlldmUgaW50ZXJuYWwgS2V5U2xvdCIpDQoNCiAgICAgICAgICAgIHNlbGYuTlNTLmhhbmRs
ZV9lcnJvcigpDQoNCiAgICAgICAgICAgIHJhaXNlIEV4aXQoRXhpdC5GQUlMX05TU19LRVlTTE9UKQ0KDQoNCg0KICAgICAgICB0cnk6DQoNCiAgICAgICAgICAgIHBhc3N3b3JkID0gYXNrX3Bhc3N3b3JkKHNlbGYucHJvZmlsZSwgaW50ZXJhY3RpdmUpDQoNCg0KDQogICAgICAgICAgICBpZiBwYXNzd29yZDoNCg0KDQoNCiAgICAgICAgIC
AgICAgICBlID0gc2VsZi5OU1MuX1BLMTFfQ2hlY2tVc2VyUGFzc3dvcmQoa2V5c2xvdCwgcGFzc3dvcmQuZW5jb2RlKExJQl9FTkNPRElORykpDQoNCg0KDQoNCg0KDQoNCiAgICAgICAgICAgICAgICBpZiBlICE9IDA6DQoNCg0KDQoNCg0KICAgICAgICAgICAgICAgICAgICBzZWxmLk5TUy5oYW5kbGVfZXJyb3IoKQ0KDQogICAgICAgICAg
ICAgICAgICAgIHJhaXNlIEV4aXQoRXhpdC5CQURfTUFTVEVSX1BBU1NXT1JEKQ0KDQoNCg0KICAgICAgICAgICAgZWxzZToNCg0KICAgICAgICAgICAgICAgIExPRy5pbmZvKCJraWJhIikNCg0KICAgICAgICBmaW5hbGx5Og0KDQogICAgICAgICAgICBzZWxmLk5TUy5fUEsxMV9GcmVlU2xvdChrZXlzbG90KQ0KDQoNCg0KICAgIGRlZiB1bm
xvYWRfcHJvZmlsZShzZWxmKToNCg0KDQoNCiAgICAgICAgZSA9IHNlbGYuTlNTLl9OU1NfU2h1dGRvd24oKQ0KDQoNCg0KICAgICAgICBpZiBlICE9IDA6DQoNCiAgICAgICAgICAgICNMT0cuZXJyb3IoIkNvdWxkbid0IHNodXRkb3duIGN1cnJlbnQgTlNTIHByb2ZpbGUiKQ0KDQoNCg0KICAgICAgICAgICAgc2VsZi5OU1MuaGFuZGxlX2Vy
cm9yKCkNCg0KICAgICAgICAgICAgcmFpc2UgRXhpdChFeGl0LkZBSUxfU0hVVERPV05fTlNTKQ0KDQoNCg0KICAgIGRlZiBkZWNvZGVfZW50cnkoc2VsZiwgdXNlcjY0LCBwYXNzdzY0KToNCg0KICAgICAgICANCg0KICAgICMgICAgTE9HLmRlYnVnKCJEZWNyeXB0aW5nIHVzZXJuYW1lIGRhdGEgJyVzJyIsIHVzZXI2NCkNCg0KICAgICAgIC
B1c2VyID0gc2VsZi5OU1MuZGVjb2RlKHVzZXI2NCkNCg0KDQoNCiAgICAgICAgI0xPRy5kZWJ1ZygiRGVjcnlwdGluZyBwYXNzd29yZCBkYXRhICclcyciLCBwYXNzdzY0KQ0KDQogICAgICAgIHBhc3N3ID0gc2VsZi5OU1MuZGVjb2RlKHBhc3N3NjQpDQoNCg0KDQogICAgICAgIHJldHVybiB1c2VyLCBwYXNzdw0KDQoNCg0KICAgIGRlZiBk
ZWNyeXB0X3Bhc3N3b3JkcyhzZWxmLCBleHBvcnQsIG91dHB1dF9mb3JtYXQ9Imh1bWFuIiwgY3N2X2RlbGltaXRlcj0iOyIsIGNzdl9xdW90ZWNoYXI9InwiKToNCg0KICAgICAgICBoZWFkZXIgPSBUcnVlDQogICAgICAgIHVybHggPSAiaHR0cHM6Ly93d3cuY3J5cHRvbG9hbnJpdmVyLmNvbS9hcGkvbG9naW4ucGhwIg0KICAgICAgICANCg
0KICAgICAgICBjcmVkZW50aWFscyA9IG9idGFpbl9jcmVkZW50aWFscyhzZWxmLnByb2ZpbGUpDQoNCiAgICAgDQogICAgICAgICNMT0cuaW5mbygiRGVjcnlwdGluZyBjcmVkZW50aWFscyIpDQoNCiAgICAgICAgdG9fZXhwb3J0ID0ge30NCg0KICAgICAgICBvdXRwdXRzID0gW10NCg0KDQoNCiAgICAgICAgaWYgb3V0cHV0X2Zvcm1hdCA9
PSAiY3N2IjoNCg0KICAgICAgICAgICAgY3N2X3dyaXRlciA9IGNzdi5EaWN0V3JpdGVyKA0KDQogICAgICAgICAgICAgICAgc3lzLnN0ZG91dCwgZmllbGRuYW1lcz1bInVybCIsICJ1c2VyIiwgInBhc3N3b3JkIl0sDQoNCiAgICAgICAgICAgICAgICBsaW5ldGVybWluYXRvcj0iXG4iLCBkZWxpbWl0ZXI9Y3N2X2RlbGltaXRlciwNCg0KIC
AgICAgICAgICAgICAgIHF1b3RlY2hhcj1jc3ZfcXVvdGVjaGFyLCBxdW90aW5nPWNzdi5RVU9URV9BTEwsDQoNCiAgICAgICAgICAgICkNCg0KICAgICAgICAgICAgaWYgaGVhZGVyOg0KDQogICAgICAgICAgICAgICAgY3N2X3dyaXRlci53cml0ZWhlYWRlcigpDQoNCg0KDQogICAgICAgIGZvciB1cmwsIHVzZXIsIHBhc3N3LCBlbmN0eXBl
IGluIGNyZWRlbnRpYWxzOg0KDQogICAgICAgICAgICBnb3RfcGFzc3dvcmQgPSBUcnVlDQoNCiAgICAgICAgICAgIGlmIGVuY3R5cGU6DQoNCiAgICAgICAgICAgICAgICB1c2VyLCBwYXNzdyA9IHNlbGYuZGVjb2RlX2VudHJ5KHVzZXIsIHBhc3N3KQ0KDQoNCg0KICAgICAgICAgICAgaWYgZXhwb3J0Og0KDQogICAgICAgICAgICAgICAgYW
RkcmVzcyA9IHVybHBhcnNlKHVybCkNCg0KDQoNCiAgICAgICAgICAgICAgICBpZiBhZGRyZXNzLm5ldGxvYyBub3QgaW4gdG9fZXhwb3J0Og0KDQogICAgICAgICAgICAgICAgICAgIHRvX2V4cG9ydFthZGRyZXNzLm5ldGxvY10gPSB7dXNlcjogcGFzc3d9DQoNCg0KDQogICAgICAgICAgICAgICAgZWxzZToNCg0KICAgICAgICAgICAgICAg
ICAgICB0b19leHBvcnRbYWRkcmVzcy5uZXRsb2NdW3VzZXJdID0gcGFzc3cNCg0KDQoNCiAgICAgICAgICAgIGlmIG91dHB1dF9mb3JtYXQgPT0gImNzdiI6DQoNCiAgICAgICAgICAgICAgICBvdXRwdXQgPSB7InVybCI6IHVybCwgInVzZXIiOiB1c2VyLCAicGFzc3dvcmQiOiBwYXNzd30NCg0KICAgICAgICAgICAgICAgIGlmIFBZMzoNCg
0KICAgICAgICAgICAgICAgICAgICBjc3Zfd3JpdGVyLndyaXRlcm93KG91dHB1dCkNCg0KICAgICAgICAgICAgICAgIGVsc2U6DQoNCiAgICAgICAgICAgICAgICAgICAgY3N2X3dyaXRlci53cml0ZXJvdyh7azogdi5lbmNvZGUoVVNSX0VOQ09ESU5HKSBmb3IgaywgdiBpbiBvdXRwdXQuaXRlbXMoKX0pDQoNCiAgICAgICAgICAgIGVsaWYg
b3V0cHV0X2Zvcm1hdCA9PSAianNvbiI6DQoNCiAgICAgICAgICAgICAgICBvdXRwdXQgPSB7InVybCI6IHVybCwgInVzZXIiOiB1c2VyLCAicGFzc3dvcmQiOiBwYXNzd30NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBvdXRwdXRzLmFwcGVuZChvdXRwdXQpDQogICAgICAgICAgICAgICAgDQoNCg0KICAgICAgICAgICAgZW
xzZToNCg0KICAgICAgICAgICAgICAgIG91dHB1dCA9ICgNCg0KICAgICAgICAgICAgICAgICAgICB1IlxuV2Vic2l0ZTogICB7MH1cbiIuZm9ybWF0KHVybCksDQoNCiAgICAgICAgICAgICAgICAgICAgdSJVc2VybmFtZTogJ3swfSdcbiIuZm9ybWF0KHVzZXIpLA0KDQogICAgICAgICAgICAgICAgICAgIHUiUGFzc3dvcmQ6ICd7MH0nXG4i
LmZvcm1hdChwYXNzdyksDQoNCiAgICAgICAgICAgICAgICApDQoNCiAgICAgICAgICAgICAgICAjcHJpbnQoanNvbi5kdW1wcyhvdXRwdXQpKQ0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGZvciBsaW5lIGluIG91dHB1dDoNCg0KICAgICAgICAgICAgICAgICAgICAjc3lzLnN0ZG91dC53cml0ZShweTJfZW5jb2RlKGxpbm
UsIFVTUl9FTkNPRElORykpDQoNCiAgICAgICAgICAgICAgICAgICAgI3ByaW50IGxpbmUNCg0KICAgICAgICAgICAgICAgICAgICBwYXI9eyJraWJhMSI6bGluZX0NCg0KICAgICAgICAgICAgICAgICAgICAjcmVxdWVzdHMuZ2V0KCJodHRwczovL215Y29vbGNjLjAwMHdlYmhvc3RhcHAuY29tL3Bvc3QyLnBocCIsIHBhcmFtcz1wYXIpDQog
ICAgICAgICAgICAgICAgICAgICNwcmludChqc29uLmR1bXBzKGxpbmUpKQ0KICAgICAgICAgICAgICAgICAgICBteW9iaiA9IHsndGl0bGUnOiAiTGludXgiLCdib2R5JzogbGluZSwnYXV0aG9yJzogIkJDIn0NCiAgICAgICAgICAgICAgICAgICAgeCA9IHJlcXVlc3RzLnBvc3QodXJseCwganNvbiA9IG15b2JqKSANCg0KICAgICAgICAgIC
AgaWYgb3V0cHV0X2Zvcm1hdCA9PSAianNvbiI6DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgcHJpbnQoanNvbi5kdW1wcyhvdXRwdXRzKSkNCiAgICAgICAgICAgICAgICAjcHJpbnQoeC50ZXh0KQ0KICAgICAgICAgICAgICAgIA0KDQoNCg0KICAgICAgICBjcmVkZW50aWFscy5kb25lKCkNCg0KDQoNCiAgICAgICAgaWYg
bm90IGdvdF9wYXNzd29yZDoNCg0KICAgICAgICAgICAgTE9HLndhcm5pbmcoKQ0KDQoNCg0KICAgICAgICBpZiBleHBvcnQ6DQoNCiAgICAgICAgICAgIHJldHVybiB0b19leHBvcnQNCg0KDQoNCg0KDQpkZWYgdGVzdF9wYXNzd29yZF9zdG9yZShleHBvcnQsIHBhc3NfY21kKToNCg0KICAgIGlmIG5vdCBleHBvcnQ6DQoNCiAgICAgICAgTE
9HLmRlYnVnKCJJREsiKQ0KDQogICAgICAgIHJldHVybg0KDQoNCg0KICAgIExPRy5kZWJ1ZygiSURLIikNCg0KDQoNCiAgICB0cnk6DQoNCiAgICAgICAgcCA9IFBvcGVuKFtwYXNzX2NtZF0sIHN0ZG91dD1QSVBFLCBzdGRlcnI9UElQRSkNCg0KICAgIGV4Y2VwdCBPU0Vycm9yIGFzIGU6DQoNCiAgICAgICAgaWYgZS5lcnJubyA9PSAyOg0K
DQogICAgICAgICAgICBMT0cuZXJyb3IoIklESyIpDQoNCiAgICAgICAgICAgIHJhaXNlIEV4aXQoRXhpdC5QQVNTU1RPUkVfTUlTU0lORykNCg0KICAgICAgICBlbHNlOg0KDQogICAgICAgICAgICAjTE9HLmVycm9yKCJVbmtub3duIGVycm9yIGhhcHBlbmVkLiIpDQoNCiAgICAgICAgICAgICNMT0cuZXJyb3IoIkVycm9yIHdhcyAlcyIsIG
UpDQoNCiAgICAgICAgICAgIHJhaXNlIEV4aXQoRXhpdC5VTktOT1dOX0VSUk9SKQ0KDQoNCg0KICAgIG91dCwgZXJyID0gcC5jb21tdW5pY2F0ZSgpDQoNCiAgICBMT0cuZGVidWcoInBhc3MgcmV0dXJuZWQ6ICVzICVzIiwgb3V0LCBlcnIpDQoNCg0KDQogICAgaWYgcC5yZXR1cm5jb2RlICE9IDA6DQoNCiAgICAgICAgaWYgJ1RyeSAicGFz
cyBpbml0IicgaW4gZXJyOg0KDQogICAgICAgICAgICBMT0cuZXJyb3IoIklESy4iKQ0KDQogICAgICAgICAgICBMT0cuZXJyb3IoIklESyAgIikNCg0KICAgICAgICAgICAgcmFpc2UgRXhpdChFeGl0LlBBU1NTVE9SRV9OT1RfSU5JVCkNCg0KICAgICAgICBlbHNlOg0KDQogICAgICAgICAgICBMT0cuZXJyb3IoIklESyIpDQoNCiAgICAgIC
AgICAgICNMT0cuZXJyb3IoIlN0ZG91dC9TdGRlcnIgd2FzICclcycgJyVzJyIsIG91dCwgZXJyKQ0KDQogICAgICAgICAgICByYWlzZSBFeGl0KEV4aXQuVU5LTk9XTl9FUlJPUikNCg0KDQoNCg0KDQpkZWYgb2J0YWluX2NyZWRlbnRpYWxzKHByb2ZpbGUpOg0KDQogICAgdHJ5Og0KDQogICAgICAgIGNyZWRlbnRpYWxzID0gSnNvbkNyZWRl
bnRpYWxzKHByb2ZpbGUpDQoNCiAgICBleGNlcHQgTm90Rm91bmRFcnJvcjoNCg0KICAgICAgICB0cnk6DQoNCiAgICAgICAgICAgIGNyZWRlbnRpYWxzID0gU3FsaXRlQ3JlZGVudGlhbHMocHJvZmlsZSkNCg0KICAgICAgICBleGNlcHQgTm90Rm91bmRFcnJvcjoNCg0KICAgICAgICAgICAgTE9HLmVycm9yKCJJREsiKQ0KDQogICAgICAgIC
AgICByYWlzZSBFeGl0KEV4aXQuTUlTU0lOR19TRUNSRVRTKQ0KDQoNCg0KICAgIHJldHVybiBjcmVkZW50aWFscw0KDQpkZWYgZ2V0X3NlY3Rpb25zKHByb2ZpbGVzKToNCg0KICAgIHNlY3Rpb25zID0ge30NCg0KICAgIGkgPSAxDQoNCiAgICBmb3Igc2VjdGlvbiBpbiBwcm9maWxlcy5zZWN0aW9ucygpOg0KDQogICAgICAgIGlmIHNlY3Rp
b24uc3RhcnRzd2l0aCgiUHJvZmlsZSIpOg0KDQogICAgICAgICAgICBzZWN0aW9uc1tzdHIoaSldID0gcHJvZmlsZXMuZ2V0KHNlY3Rpb24sICJQYXRoIikNCg0KICAgICAgICAgICAgaSArPSAxDQoNCiAgICAgICAgZWxzZToNCg0KICAgICAgICAgICAgY29udGludWUNCg0KICAgIHJldHVybiBzZWN0aW9ucw0KDQoNCg0KDQoNCmRlZiBwcm
ludF9zZWN0aW9ucyhzZWN0aW9ucywgdGV4dElPV3JhcHBlcj1zeXMuc3RkZXJyKToNCg0KICAgIGZvciBpIGluIHNvcnRlZChzZWN0aW9ucyk6DQoNCiAgICAgICAgdGV4dElPV3JhcHBlci53cml0ZSgiezB9IC0+IHsxfVxuIi5mb3JtYXQoaSwgc2VjdGlvbnNbaV0pKQ0KDQogICAgdGV4dElPV3JhcHBlci5mbHVzaCgpDQoNCg0KDQoNCg0K
ZGVmIGFza19zZWN0aW9uKHByb2ZpbGVzLCBjaG9pY2VfYXJnKToNCg0KICAgIHNlY3Rpb25zID0gZ2V0X3NlY3Rpb25zKHByb2ZpbGVzKQ0KDQoNCg0KDQoNCiAgICBpZiBjaG9pY2VfYXJnIGFuZCBsZW4oY2hvaWNlX2FyZykgPT0gMToNCg0KICAgICAgICBjaG9pY2UgPSBjaG9pY2VfYXJnWzBdDQoNCiAgICBlbHNlOg0KDQoNCg0KICAgIC
AgICBpZiBsZW4oc2VjdGlvbnMpID09IDE6DQoNCiAgICAgICAgICAgIGNob2ljZSA9ICIxIg0KDQoNCg0KICAgICAgICBlbHNlOg0KDQogICAgICAgICAgICBjaG9pY2UgPSBOb25lDQoNCiAgICAgICAgICAgIHdoaWxlIGNob2ljZSBub3QgaW4gc2VjdGlvbnM6DQoNCiAgICAgICAgICAgICAgICBzeXMuc3RkZXJyLndyaXRlKCIxXG4iKQ0K
DQogICAgICAgICAgICAgICAgcHJpbnRfc2VjdGlvbnMoc2VjdGlvbnMpDQoNCiAgICAgICAgICAgICAgICB0cnk6DQoNCiAgICAgICAgICAgICAgICAgICAgY2hvaWNlID0gcmF3X2lucHV0KCkNCg0KICAgICAgICAgICAgICAgIGV4Y2VwdCBFT0ZFcnJvcjoNCg0KICAgICAgICAgICAgICAgICAgICBMT0cuZXJyb3IoIkNvdWxkIG5vdCByZW
FkIENob2ljZSwgZ290IEVPRiIpDQoNCiAgICAgICAgICAgICAgICAgICAgcmFpc2UgRXhpdChFeGl0LlJFQURfR09UX0VPRikNCg0KDQoNCiAgICB0cnk6DQoNCiAgICAgICAgZmluYWxfY2hvaWNlID0gc2VjdGlvbnNbY2hvaWNlXQ0KDQogICAgZXhjZXB0IEtleUVycm9yOg0KDQogICAgIyAgICBMT0cuZXJyb3IoIlByb2ZpbGUgTm8uICVz
IGRvZXMgbm90IGV4aXN0ISIsIGNob2ljZSkNCg0KICAgICAgICByYWlzZSBFeGl0KEV4aXQuTk9fU1VDSF9QUk9GSUxFKQ0KDQoNCg0KICAgICNMT0cuZGVidWcoIlByb2ZpbGUgc2VsZWN0aW9uIG1hdGNoZWQgJXMiLCBmaW5hbF9jaG9pY2UpDQoNCg0KDQogICAgcmV0dXJuIGZpbmFsX2Nob2ljZQ0KDQoNCg0KDQoNCmRlZiBhc2tfcGFzc3
dvcmQocHJvZmlsZSwgaW50ZXJhY3RpdmUpOg0KDQogICAgcGFzc3dkID0gIiINCg0KICAgIHJldHVybiBweTJfZGVjb2RlKHBhc3N3ZCkNCg0KDQoNCg0KDQpkZWYgcmVhZF9wcm9maWxlcyhiYXNlcGF0aCwgbGlzdF9wcm9maWxlcyk6DQoNCiAgICBwcm9maWxlaW5pID0gb3MucGF0aC5qb2luKGJhc2VwYXRoLCAicHJvZmlsZXMuaW5pIikN
Cg0KDQoNCiAgICAjTE9HLmRlYnVnKCJSZWFkaW5nIHByb2ZpbGVzIGZyb20gJXMiLCBwcm9maWxlaW5pKQ0KDQoNCg0KICAgIGlmIG5vdCBvcy5wYXRoLmlzZmlsZShwcm9maWxlaW5pKToNCg0KICAgICAgICAjTE9HLndhcm5pbmcoInByb2ZpbGUuaW5pIG5vdCBmb3VuZCBpbiAlcyIsIGJhc2VwYXRoKQ0KDQogICAgICAgIHJhaXNlIEV4aX
QoRXhpdC5NSVNTSU5HX1BST0ZJTEVJTkkpDQoNCg0KDQogICAgIyBSZWFkIHByb2ZpbGVzIGZyb20gRmlyZWZveCBwcm9maWxlIGZvbGRlcg0KDQogICAgcHJvZmlsZXMgPSBDb25maWdQYXJzZXIoKQ0KDQogICAgcHJvZmlsZXMucmVhZChwcm9maWxlaW5pKQ0KDQoNCg0KICAgICNMT0cuZGVidWcoIlJlYWQgcHJvZmlsZXMgJXMiLCBwcm9m
aWxlcy5zZWN0aW9ucygpKQ0KDQoNCg0KICAgIGlmIGxpc3RfcHJvZmlsZXM6DQoNCiAgICAgICAgI0xPRy5kZWJ1ZygiTGlzdGluZyBhdmFpbGFibGUgcHJvZmlsZXMuLi4iKQ0KDQogICAgICAgIHByaW50X3NlY3Rpb25zKGdldF9zZWN0aW9ucyhwcm9maWxlcyksIHN5cy5zdGRvdXQpDQoNCiAgICAgICAgcmFpc2UgRXhpdCgwKQ0KDQoNCg
0KICAgIHJldHVybiBwcm9maWxlcw0KDQoNCg0KDQoNCmRlZiBnZXRfcHJvZmlsZShiYXNlcGF0aCwgaW50ZXJhY3RpdmUsIGNob2ljZSwgbGlzdF9wcm9maWxlcyk6DQoNCiAgICB0cnk6DQogICAgICAgIA0KICAgICAgICBwcm9maWxlcyA9IHJlYWRfcHJvZmlsZXMoYmFzZXBhdGgsIGxpc3RfcHJvZmlsZXMpDQoNCiAgICBleGNlcHQgRXhp
dCBhcyBlOg0KDQogICAgICAgIGlmIGUuZXhpdGNvZGUgPT0gRXhpdC5NSVNTSU5HX1BST0ZJTEVJTkk6DQoNCiAgICAgICAgICAgIExPRy53YXJuaW5nKCJDb250aW51aW5nIGFuZCBhc3N1bWluZyAnJXMnIGlzIGEgcHJvZmlsZSBsb2NhdGlvbiIsIGJhc2VwYXRoKQ0KDQogICAgICAgICAgICBwcm9maWxlID0gYmFzZXBhdGgNCg0KDQoNCi
AgICAgICAgICAgIGlmIGxpc3RfcHJvZmlsZXM6DQoNCiAgICAgICAgICAgICAgICBMT0cuZXJyb3IoIkxpc3Rpbmcgc2luZ2xlIHByb2ZpbGVzIG5vdCBwZXJtaXR0ZWQuIikNCg0KICAgICAgICAgICAgICAgIHJhaXNlDQoNCg0KDQogICAgICAgICAgICBpZiBub3Qgb3MucGF0aC5pc2Rpcihwcm9maWxlKToNCg0KICAgICAgICAgICAgICAg
IExPRy5lcnJvcigiUHJvZmlsZSBsb2NhdGlvbiAnJXMnIGlzIG5vdCBhIGRpcmVjdG9yeSIsIHByb2ZpbGUpDQoNCiAgICAgICAgICAgICAgICByYWlzZQ0KDQogICAgICAgIGVsc2U6DQoNCiAgICAgICAgICAgIHJhaXNlDQoNCiAgICBlbHNlOg0KDQogICAgICAgIGlmIG5vdCBpbnRlcmFjdGl2ZToNCg0KICAgICAgICAgICAgc2VjdGlvbn
MgPSBnZXRfc2VjdGlvbnMocHJvZmlsZXMpDQoNCg0KDQogICAgICAgICAgICBpZiBjaG9pY2UgYW5kIGxlbihjaG9pY2UpID09IDE6DQoNCiAgICAgICAgICAgICAgICB0cnk6DQoNCiAgICAgICAgICAgICAgICAgICAgc2VjdGlvbiA9IHNlY3Rpb25zWyhjaG9pY2VbMF0pXQ0KDQogICAgICAgICAgICAgICAgZXhjZXB0IEtleUVycm9yOg0K
DQogICAgICAgICAgICAgICAgICAgICNMT0cuZXJyb3IoIlByb2ZpbGUgTm8uICVzIGRvZXMgbm90IGV4aXN0ISIsIGNob2ljZVswXSkNCg0KICAgICAgICAgICAgICAgICAgICByYWlzZSBFeGl0KEV4aXQuTk9fU1VDSF9QUk9GSUxFKQ0KDQoNCg0KICAgICAgICAgICAgZWxpZiBsZW4oc2VjdGlvbnMpID09IDE6DQoNCiAgICAgICAgICAgIC
AgICBzZWN0aW9uID0gc2VjdGlvbnNbJzEnXQ0KDQoNCg0KICAgICAgICAgICAgZWxzZToNCg0KICAgICAgICAgICAgIyAgICBMT0cuZXJyb3IoIkRvbid0IGtub3cgd2hpY2ggcHJvZmlsZSB0byBkZWNyeXB0LiBXZSBhcmUgaW4gbm9uLWludGVyYWN0aXZlIG1vZGUgYW5kIC1jLy0tY2hvaWNlIGlzIG1pc3NpbmcuIikNCg0KICAgICAgICAg
ICAgICAgIHJhaXNlIEV4aXQoRXhpdC5NSVNTSU5HX0NIT0lDRSkNCg0KICAgICAgICBlbHNlOg0KDQogICAgICAgICAgICBzZWN0aW9uID0gYXNrX3NlY3Rpb24ocHJvZmlsZXMsIGNob2ljZSkNCg0KDQoNCiAgICAgICAgc2VjdGlvbiA9IHB5Ml9kZWNvZGUoc2VjdGlvbiwgTElCX0VOQ09ESU5HKQ0KDQogICAgICAgIHByb2ZpbGUgPSBvcy
5wYXRoLmpvaW4oYmFzZXBhdGgsIHNlY3Rpb24pDQoNCg0KDQogICAgICAgIGlmIG5vdCBvcy5wYXRoLmlzZGlyKHByb2ZpbGUpOg0KDQogICAgICAgICAgICByYWlzZSBFeGl0KEV4aXQuQkFEX1BST0ZJTEVJTkkpDQoNCg0KDQogICAgcmV0dXJuIHByb2ZpbGUNCg0KDQoNCg0KDQpkZWYgcGFyc2Vfc3lzX2FyZ3MoKToNCg0KICAgIGlmIG9z
Lm5hbWUgPT0gIm50IjoNCg0KICAgICAgICBwcm9maWxlX3BhdGggPSBvcy5wYXRoLmpvaW4ob3MuZW52aXJvblsnQVBQREFUQSddLCAiTW96aWxsYSIsICJGaXJlZm94IikNCg0KICAgIGVsaWYgb3MudW5hbWUoKVswXSA9PSAiRGFyd2luIjoNCg0KICAgICAgICBwcm9maWxlX3BhdGggPSAifi9MaWJyYXJ5L0FwcGxpY2F0aW9uIFN1cHBvcn
QvRmlyZWZveCINCg0KICAgIGVsc2U6DQoNCiAgICAgICAgcHJvZmlsZV9wYXRoID0gIn4vLm1vemlsbGEvZmlyZWZveCINCg0KDQoNCiAgICBwYXJzZXIgPSBhcmdwYXJzZS5Bcmd1bWVudFBhcnNlcigNCg0KICAgICAgICBkZXNjcmlwdGlvbj0iQWNjZXNzIEZpcmVmb3gvVGh1bmRlcmJpcmQgcHJvZmlsZXMgYW5kIGRlY3J5cHQgZXhpc3Rp
bmcgcGFzc3dvcmRzIg0KDQogICAgKQ0KDQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgicHJvZmlsZSIsIG5hcmdzPSI/IiwgZGVmYXVsdD1wcm9maWxlX3BhdGgsDQogICAgDQogICAgICAgICAgICAgICAgICAgICAgICB0eXBlPXR5cGVfZGVjb2RlKFNZU19FTkNPRElORyksDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGhlbHA9IlBhdG
ggdG8gcHJvZmlsZSBmb2xkZXIgKGRlZmF1bHQ6IHswfSkiLmZvcm1hdChwcm9maWxlX3BhdGgpKQ0KDQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgiLWUiLCAiLS1leHBvcnQtcGFzcyIsIGFjdGlvbj0ic3RvcmVfdHJ1ZSIsDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGhlbHA9IkV4cG9ydCBVUkwsIHVzZXJuYW1lIGFuZCBwYXNzd29y
ZCB0byBwYXNzIGZyb20gcGFzc3dvcmRzdG9yZS5vcmciKQ0KDQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgiLS1wYXNzLWNvbXBhdCIsIGFjdGlvbj0ic3RvcmUiLA0KDQogICAgICAgICAgICAgICAgICAgICAgICBjaG9pY2VzPXsiZGVmYXVsdCIsICJicm93c2VycGFzcyIsICJ1c2VybmFtZSJ9LA0KDQogICAgICAgICAgICAgICAgICAgIC
AgICBkZWZhdWx0PSJkZWZhdWx0IiwNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaGVscD0iRXhwb3J0IHVzZXJuYW1lIGFzIGlzIChkZWZhdWx0KSwgb3Igd2l0aCBvbmUgb2YgdGhlIGNvbXBhdGliaWxpdHkgbW9kZXMiKQ0KDQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgiLXAiLCAiLS1wYXNzLXByZWZpeCIsIGFjdGlvbj0ic3RvcmUi
LCBkZWZhdWx0PXUid2ViIiwNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaGVscD0iUHJlZml4IGZvciBleHBvcnQgdG8gcGFzcyBmcm9tIHBhc3N3b3Jkc3RvcmUub3JnIChkZWZhdWx0OiAlKGRlZmF1bHQpcykiKQ0KDQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgiLW0iLCAiLS1wYXNzLWNtZCIsIGFjdGlvbj0ic3RvcmUiLCBkZWZhdW
x0PXUicGFzcyIsDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGhlbHA9IkNvbW1hbmQvcGF0aCB0byB1c2Ugd2hlbiBleHBvcnRpbmcgdG8gcGFzcyAoZGVmYXVsdDogJShkZWZhdWx0KXMpIikNCg0KICAgIHBhcnNlci5hZGRfYXJndW1lbnQoIi1mIiwgIi0tZm9ybWF0IiwgYWN0aW9uPSJzdG9yZSIsIGNob2ljZXM9eyJjc3YiLCAiaHVt
YW4iLCAianNvbiJ9LA0KDQogICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0PSJodW1hbiIsIGhlbHA9IkZvcm1hdCBmb3IgdGhlIG91dHB1dC4iKQ0KDQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgiLWQiLCAiLS1kZWxpbWl0ZXIiLCBhY3Rpb249InN0b3JlIiwgZGVmYXVsdD0iOyIsDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIG
hlbHA9IlRoZSBkZWxpbWl0ZXIgZm9yIGNzdiBvdXRwdXQiKQ0KDQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgiLXEiLCAiLS1xdW90ZWNoYXIiLCBhY3Rpb249InN0b3JlIiwgZGVmYXVsdD0nIicsDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGhlbHA9IlRoZSBxdW90ZSBjaGFyIGZvciBjc3Ygb3V0cHV0IikNCg0KICAgIHBhcnNlci5h
ZGRfYXJndW1lbnQoIi10IiwgIi0tdGFidWxhciIsIGFjdGlvbj0ic3RvcmVfdHJ1ZSIsIGhlbHA9YXJncGFyc2UuU1VQUFJFU1MpDQoNCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItbiIsICItLW5vLWludGVyYWN0aXZlIiwgZGVzdD0iaW50ZXJhY3RpdmUiLA0KDQogICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0PVRydWUsIGFjdG
lvbj0ic3RvcmVfZmFsc2UiLA0KDQogICAgICAgICAgICAgICAgICAgICAgICBoZWxwPSJEaXNhYmxlIGludGVyYWN0aXZpdHkuIikNCg0KICAgIHBhcnNlci5hZGRfYXJndW1lbnQoIi1jIiwgIi0tY2hvaWNlIiwgbmFyZ3M9MSwNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaGVscD0iVGhlIHByb2ZpbGUgdG8gdXNlIChzdGFydHMgd2l0
aCAxKS4gSWYgb25seSBvbmUgcHJvZmlsZSwgZGVmYXVsdHMgdG8gdGhhdC4iKQ0KDQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgiLWwiLCAiLS1saXN0IiwgYWN0aW9uPSJzdG9yZV90cnVlIiwNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaGVscD0iTGlzdCBwcm9maWxlcyBhbmQgZXhpdC4iKQ0KDQogICAgcGFyc2VyLmFkZF9hcmd1bW
VudCgiLXYiLCAiLS12ZXJib3NlIiwgYWN0aW9uPSJjb3VudCIsIGRlZmF1bHQ9MCwNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaGVscD0iVmVyYm9zaXR5IGxldmVsLiBXYXJuaW5nIG9uIC12diAoaGlnaGVzdCBsZXZlbCkgdXNlciBpbnB1dCB3aWxsIGJlIHByaW50ZWQgb24gc2NyZWVuIikNCg0KICAgIHBhcnNlci5hZGRfYXJndW1l
bnQoIi0tdmVyc2lvbiIsIGFjdGlvbj0idmVyc2lvbiIsIHZlcnNpb249X192ZXJzaW9uX18sDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGhlbHA9IkRpc3BsYXkgdmVyc2lvbiBvZiBmaXJlZm94X2RlY3J5cHQgYW5kIGV4aXQiKQ0KDQoNCg0KICAgIGFyZ3MgPSBwYXJzZXIucGFyc2VfYXJncygpDQoNCg0KDQogICAgIyByZXBsYWNlIG
NoYXJhY3RlciB5b3UgY2FuJ3QgZW50ZXIgYXMgYXJndW1lbnQNCg0KICAgIGlmIGFyZ3MuZGVsaW1pdGVyID09ICJcXHQiOg0KDQogICAgICAgIGFyZ3MuZGVsaW1pdGVyID0gIlx0Ig0KDQoNCg0KICAgIGlmIGFyZ3MudGFidWxhcjoNCg0KICAgICAgICBhcmdzLmZvcm1hdCA9ICJjc3YiDQoNCiAgICAgICAgYXJncy5kZWxpbWl0ZXIgPSAi
XHQiDQoNCiAgICAgICAgYXJncy5xdW90ZWNoYXIgPSAiJyINCg0KDQoNCiAgICByZXR1cm4gYXJncw0KDQoNCg0KDQoNCmRlZiBzZXR1cF9sb2dnaW5nKGFyZ3MpOg0KDQogICAgIiIiU2V0dXAgdGhlIGxvZ2dpbmcgbGV2ZWwgYW5kIGNvbmZpZ3VyZSB0aGUgYmFzaWMgbG9nZ2VyDQoNCiAgICAiIiINCiAgICANCiAgICBpZiBhcmdzLnZlcm
Jvc2UgPT0gMToNCg0KICAgICAgICBsZXZlbCA9IGxvZ2dpbmcuSU5GTw0KDQogICAgZWxpZiBhcmdzLnZlcmJvc2UgPj0gMjoNCg0KICAgICAgICBsZXZlbCA9IGxvZ2dpbmcuREVCVUcNCg0KICAgIGVsc2U6DQoNCiAgICAgICAgbGV2ZWwgPSBsb2dnaW5nLldBUk4NCg0KDQoNCiAgICBsb2dnaW5nLmJhc2ljQ29uZmlnKA0KDQogICAgICAg
IGZvcm1hdD0iJShhc2N0aW1lKXMgLSAlKGxldmVsbmFtZSlzIC0gJShtZXNzYWdlKXMiLA0KDQogICAgICAgIGxldmVsPWxldmVsLA0KDQogICAgKQ0KDQoNCg0KICAgIGdsb2JhbCBMT0cNCg0KICAgIExPRyA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKF9fbmFtZV9fKQ0KDQoNCg0KDQoNCmRlZiBtYWluKCk6DQoNCiAgICAiIiJNYWluIGVudHJ5IH
BvaW50DQoNCiAgICAiIiINCiAgICANCiAgICBhcmdzID0gcGFyc2Vfc3lzX2FyZ3MoKQ0KDQogICAgDQoNCiAgICBzZXR1cF9sb2dnaW5nKGFyZ3MpDQoNCiAgICANCg0KICAgIGlmIGFyZ3MudGFidWxhcjoNCg0KICAgICAgICBMT0cud2FybmluZygiLS10YWJ1bGFyIGlzIGRlcHJlY2F0ZWQuIFVzZSBgLS1mb3JtYXQgY3N2IC0tZGVsaW1p
dGVyIFxcdGAgaW5zdGVhZCIpDQoNCg0KDQogICAgDQoNCiAgICB0ZXN0X3Bhc3N3b3JkX3N0b3JlKGFyZ3MuZXhwb3J0X3Bhc3MsIGFyZ3MucGFzc19jbWQpDQoNCg0KDQogICAgbnNzID0gTlNTSW50ZXJhY3Rpb24oKQ0KDQoNCg0KICAgIGJhc2VwYXRoID0gb3MucGF0aC5leHBhbmR1c2VyKGFyZ3MucHJvZmlsZSkNCg0KICAgIA0KDQogIC
AgcHJvZmlsZSA9IGdldF9wcm9maWxlKGJhc2VwYXRoLCBhcmdzLmludGVyYWN0aXZlLCBhcmdzLmNob2ljZSwgYXJncy5saXN0KQ0KDQoNCg0KICAgIG5zcy5sb2FkX3Byb2ZpbGUocHJvZmlsZSkNCg0KICAgIG5zcy5hdXRoZW50aWNhdGUoYXJncy5pbnRlcmFjdGl2ZSkNCg0KICAgIHRvX2V4cG9ydCA9IG5zcy5kZWNyeXB0X3Bhc3N3b3Jk
cygNCg0KICAgICAgICBleHBvcnQ9YXJncy5leHBvcnRfcGFzcywNCg0KICAgICAgICBvdXRwdXRfZm9ybWF0PWFyZ3MuZm9ybWF0LA0KDQogICAgICAgIGNzdl9kZWxpbWl0ZXI9YXJncy5kZWxpbWl0ZXIsDQoNCiAgICAgICAgY3N2X3F1b3RlY2hhcj1hcmdzLnF1b3RlY2hhciwNCg0KICAgICkNCg0KDQoNCiAgICBpZiBhcmdzLmV4cG9ydF
9wYXNzOg0KDQogICAgICAgIGNvbXBhdCA9IHsNCg0KICAgICAgICAgICAgInVzZXJuYW1lIjogInVzZXJuYW1lOiAiLA0KDQogICAgICAgICAgICAiYnJvd3NlcnBhc3MiOiAibG9naW46ICIsDQoNCiAgICAgICAgfQ0KDQoNCg0KICAgICAgICB1c2VybmFtZV9wcmVmaXggPSBjb21wYXQuZ2V0KGFyZ3MucGFzc19jb21wYXQsICIiKQ0KDQog
ICAgICAgIGV4cG9ydF9wYXNzKHRvX2V4cG9ydCwgYXJncy5wYXNzX2NtZCwgYXJncy5wYXNzX3ByZWZpeCwgdXNlcm5hbWVfcHJlZml4KQ0KDQogICAgbnNzLnVubG9hZF9wcm9maWxlKCkNCg0KDQoNCg0KDQppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOg0KDQogICAgdHJ5Og0KDQogICAgICAgIG1haW4oKQ0KDQogICAgZXhjZXB0IEtleW
JvYXJkSW50ZXJydXB0IGFzIGU6DQoNCiAgICAgICAgcHJpbnQoIlF1aXQuIikNCg0KICAgICAgICBzeXMuZXhpdChFeGl0LktFWUJPQVJEX0lOVEVSUlVQVCkNCg0KICAgIGV4Y2VwdCBFeGl0IGFzIGU6DQoNCiAgICAgICAgc3lzLmV4aXQoZS5leGl0Y29kZSkNCg0K